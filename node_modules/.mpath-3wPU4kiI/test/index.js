'use strict';

/**
 * Test dependencies.
 */

const mpath = require('../');
const assert = require('assert');

/**
 * logging helper
 */

function log(o) {
  console.log();
  console.log(require('util').inspect(o, false, 1000));
}

/**
 * special path for override tests
 */

const special = '_doc';

/**
 * Tests
 */

describe('mpath', function() {

  /**
   * test doc creator
   */

  function doc() {
    const o = { first: { second: { third: [3, { name: 'aaron' }, 9] } } };
    o.comments = [
      { name: 'one' },
      { name: 'two', _doc: { name: '2' } },
      { name: 'three',
        comments: [{}, { comments: [{ val: 'twoo' }] }],
        _doc: { name: '3', comments: [{}, { _doc: { comments: [{ val: 2 }] } }] } }
    ];
    o.name = 'jiro';
    o.array = [
      { o: { array: [{ x: { b: [4, 6, 8] } }, { y: 10 }] } },
      { o: { array: [{ x: { b: [1, 2, 3] } }, { x: { z: 10 } }, { x: { b: 'hi' } }] } },
      { o: { array: [{ x: { b: null } }, { x: { b: [null, 1] } }] } },
      { o: { array: [{ x: null }] } },
      { o: { array: [{ y: 3 }] } },
      { o: { array: [3, 0, null] } },
      { o: { name: 'ha' } }
    ];
    o.arr = [
      { arr: [{ a: { b: 47 } }, { a: { c: 48 } }, { d: 'yep' }] },
      { yep: true }
    ];
    return o;
  }

  describe('get', function() {
    const o = doc();

    it('`path` must be a string or array', function(done) {
      assert.throws(function() {
        mpath.get({}, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(4, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(function() {}, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(/asdf/, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(Math, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(Buffer, o);
      }, /Must be either string or array/);
      assert.doesNotThrow(function() {
        mpath.get('string', o);
      });
      assert.doesNotThrow(function() {
        mpath.get([], o);
      });
      done();
    });

    describe('without `special`', function() {
      it('works', function(done) {
        assert.equal('jiro', mpath.get('name', o));

        assert.deepEqual(
          { second: { third: [3, { name: 'aaron' }, 9] } }
          , mpath.get('first', o)
        );

        assert.deepEqual(
          { third: [3, { name: 'aaron' }, 9] }
          , mpath.get('first.second', o)
        );

        assert.deepEqual(
          [3, { name: 'aaron' }, 9]
          , mpath.get('first.second.third', o)
        );

        assert.deepEqual(
          3
          , mpath.get('first.second.third.0', o)
        );

        assert.deepEqual(
          9
          , mpath.get('first.second.third.2', o)
        );

        assert.deepEqual(
          { name: 'aaron' }
          , mpath.get('first.second.third.1', o)
        );

        assert.deepEqual(
          'aaron'
          , mpath.get('first.second.third.1.name', o)
        );

        assert.deepEqual([
          { name: 'one' },
          { name: 'two', _doc: { name: '2' } },
          { name: 'three',
            comments: [{}, { comments: [{ val: 'twoo' }] }],
            _doc: { name: '3', comments: [{}, { _doc: { comments: [{ val: 2 }] } }] } }],
        mpath.get('comments', o));

        assert.deepEqual({ name: 'one' }, mpath.get('comments.0', o));
        assert.deepEqual('one', mpath.get('comments.0.name', o));
        assert.deepEqual('two', mpath.get('comments.1.name', o));
        assert.deepEqual('three', mpath.get('comments.2.name', o));

        assert.deepEqual([{}, { comments: [{ val: 'twoo' }] }]
          , mpath.get('comments.2.comments', o));

        assert.deepEqual({ comments: [{ val: 'twoo' }] }
          , mpath.get('comments.2.comments.1', o));

        assert.deepEqual('twoo', mpath.get('comments.2.comments.1.comments.0.val', o));

        done();
      });

      it('handles array.property dot-notation', function(done) {
        assert.deepEqual(
          ['one', 'two', 'three']
          , mpath.get('comments.name', o)
        );
        done();
      });

      it('handles array.array notation', function(done) {
        assert.deepEqual(
          [undefined, undefined, [{}, { comments: [{ val: 'twoo' }] }]]
          , mpath.get('comments.comments', o)
        );
        done();
      });

      it('handles prop.prop.prop.arrayProperty notation', function(done) {
        assert.deepEqual(
          [undefined, 'aaron', undefined]
          , mpath.get('first.second.third.name', o)
        );
        assert.deepEqual(
          [1, 'aaron', 1]
          , mpath.get('first.second.third.name', o, function(v) {
            return undefined === v ? 1 : v;
          })
        );
        done();
      });

      it('handles array.prop.array', function(done) {
        assert.deepEqual(
          [[{ x: { b: [4, 6, 8] } }, { y: 10 }],
            [{ x: { b: [1, 2, 3] } }, { x: { z: 10 } }, { x: { b: 'hi' } }],
            [{ x: { b: null } }, { x: { b: [null, 1] } }],
            [{ x: null }],
            [{ y: 3 }],
            [3, 0, null],
            undefined
          ]
          , mpath.get('array.o.array', o)
        );
        done();
      });

      it('handles array.prop.array.index', function(done) {
        assert.deepEqual(
          [{ x: { b: [4, 6, 8] } },
            { x: { b: [1, 2, 3] } },
            { x: { b: null } },
            { x: null },
            { y: 3 },
            3,
            undefined
          ]
          , mpath.get('array.o.array.0', o)
        );
        done();
      });

      it('handles array.prop.array.index.prop', function(done) {
        assert.deepEqual(
          [{ b: [4, 6, 8] },
            { b: [1, 2, 3] },
            { b: null },
            null,
            undefined,
            undefined,
            undefined
          ]
          , mpath.get('array.o.array.0.x', o)
        );
        done();
      });

      it('handles array.prop.array.prop', function(done) {
        assert.deepEqual(
          [[undefined, 10],
            [undefined, undefined, undefined],
            [undefined, undefined],
            [undefined],
            [3],
            [undefined, undefined, undefined],
            undefined
          ]
          , mpath.get('array.o.array.y', o)
        );
        assert.deepEqual(
          [[{ b: [4, 6, 8] }, undefined],
            [{ b: [1, 2, 3] }, { z: 10 }, { b: 'hi' }],
            [{ b: null }, { b: [null, 1] }],
            [null],
            [undefined],
            [undefined, undefined, undefined],
            undefined
          ]
          , mpath.get('array.o.array.x', o)
        );
        done();
      });

      it('handles array.prop.array.prop.prop', function(done) {
        assert.deepEqual(
          [[[4, 6, 8], undefined],
            [[1, 2, 3], undefined, 'hi'],
            [null, [null, 1]],
            [null],
            [undefined],
            [undefined, undefined, undefined],
            undefined
          ]
          , mpath.get('array.o.array.x.b', o)
        );
        done();
      });

      it('handles array.prop.array.prop.prop.index', function(done) {
        assert.deepEqual(
          [[6, undefined],
            [2, undefined, 'i'], // undocumented feature (string indexing)
            [null, 1],
            [null],
            [undefined],
            [undefined, undefined, undefined],
            undefined
          ]
          , mpath.get('array.o.array.x.b.1', o)
        );
        assert.deepEqual(
          [[6, 0],
            [2, 0, 'i'], // undocumented feature (string indexing)
            [null, 1],
            [null],
            [0],
            [0, 0, 0],
            0
          ]
          , mpath.get('array.o.array.x.b.1', o, function(v) {
            return undefined === v ? 0 : v;
          })
        );
        done();
      });

      it('handles array.index.prop.prop', function(done) {
        assert.deepEqual(
          [{ x: { b: [1, 2, 3] } }, { x: { z: 10 } }, { x: { b: 'hi' } }]
          , mpath.get('array.1.o.array', o)
        );
        assert.deepEqual(
          ['hi', 'hi', 'hi']
          , mpath.get('array.1.o.array', o, function(v) {
            if (Array.isArray(v)) {
              return v.map(function(val) {
                return 'hi';
              });
            }
            return v;
          })
        );
        done();
      });

      it('handles array.array.index', function(done) {
        assert.deepEqual(
          [{ a: { c: 48 } }, undefined]
          , mpath.get('arr.arr.1', o)
        );
        assert.deepEqual(
          ['woot', undefined]
          , mpath.get('arr.arr.1', o, function(v) {
            if (v && v.a && v.a.c) return 'woot';
            return v;
          })
        );
        done();
      });

      it('handles array.array.index.prop', function(done) {
        assert.deepEqual(
          [{ c: 48 }, 'woot']
          , mpath.get('arr.arr.1.a', o, function(v) {
            if (undefined === v) return 'woot';
            return v;
          })
        );
        assert.deepEqual(
          [{ c: 48 }, undefined]
          , mpath.get('arr.arr.1.a', o)
        );
        mpath.set('arr.arr.1.a', [{ c: 49 }, undefined], o);
        assert.deepEqual(
          [{ c: 49 }, undefined]
          , mpath.get('arr.arr.1.a', o)
        );
        mpath.set('arr.arr.1.a', [{ c: 48 }, undefined], o);
        done();
      });

      it('handles array.array.index.prop.prop', function(done) {
        assert.deepEqual(
          [48, undefined]
          , mpath.get('arr.arr.1.a.c', o)
        );
        assert.deepEqual(
          [48, 'woot']
          , mpath.get('arr.arr.1.a.c', o, function(v) {
            if (undefined === v) return 'woot';
            return v;
          })
        );
        done();
      });

    });

    describe('with `special`', function() {
      describe('that is a string', function() {
        it('works', function(done) {
          assert.equal('jiro', mpath.get('name', o, special));

          assert.deepEqual(
            { second: { third: [3, { name: 'aaron' }, 9] } }
            , mpath.get('first', o, special)
          );

          assert.deepEqual(
            { third: [3, { name: 'aaron' }, 9] }
            , mpath.get('first.second', o, special)
          );

          assert.deepEqual(
            [3, { name: 'aaron' }, 9]
            , mpath.get('first.second.third', o, special)
          );

          assert.deepEqual(
            3
            , mpath.get('first.second.third.0', o, special)
          );

          assert.deepEqual(
            4
            , mpath.get('first.second.third.0', o, special, function(v) {
              return 3 === v ? 4 : v;
            })
          );

          assert.deepEqual(
            9
            , mpath.get('first.second.third.2', o, special)
          );

          assert.deepEqual(
            { name: 'aaron' }
            , mpath.get('first.second.third.1', o, special)
          );

          assert.deepEqual(
            'aaron'
            , mpath.get('first.second.third.1.name', o, special)
          );

          assert.deepEqual([
            { name: 'one' },
            { name: 'two', _doc: { name: '2' } },
            { name: 'three',
              comments: [{}, { comments: [{ val: 'twoo' }] }],
              _doc: { name: '3', comments: [{}, { _doc: { comments: [{ val: 2 }] } }] } }],
          mpath.get('comments', o, special));

          assert.deepEqual({ name: 'one' }, mpath.get('comments.0', o, special));
          assert.deepEqual('one', mpath.get('comments.0.name', o, special));
          assert.deepEqual('2', mpath.get('comments.1.name', o, special));
          assert.deepEqual('3', mpath.get('comments.2.name', o, special));
          assert.deepEqual('nice', mpath.get('comments.2.name', o, special, function(v) {
            return '3' === v ? 'nice' : v;
          }));

          assert.deepEqual([{}, { _doc: { comments: [{ val: 2 }] } }]
            , mpath.get('comments.2.comments', o, special));

          assert.deepEqual({ _doc: { comments: [{ val: 2 }] } }
            , mpath.get('comments.2.comments.1', o, special));

          assert.deepEqual(2, mpath.get('comments.2.comments.1.comments.0.val', o, special));
          done();
        });

        it('handles array.property dot-notation', function(done) {
          assert.deepEqual(
            ['one', '2', '3']
            , mpath.get('comments.name', o, special)
          );
          assert.deepEqual(
            ['one', 2, '3']
            , mpath.get('comments.name', o, special, function(v) {
              return '2' === v ? 2 : v;
            })
          );
          done();
        });

        it('handles array.array notation', function(done) {
          assert.deepEqual(
            [undefined, undefined, [{}, { _doc: { comments: [{ val: 2 }] } }]]
            , mpath.get('comments.comments', o, special)
          );
          done();
        });

        it('handles array.array.index.array', function(done) {
          assert.deepEqual(
            [undefined, undefined, [{ val: 2 }]]
            , mpath.get('comments.comments.1.comments', o, special)
          );
          done();
        });

        it('handles array.array.index.array.prop', function(done) {
          assert.deepEqual(
            [undefined, undefined, [2]]
            , mpath.get('comments.comments.1.comments.val', o, special)
          );
          assert.deepEqual(
            ['nil', 'nil', [2]]
            , mpath.get('comments.comments.1.comments.val', o, special, function(v) {
              return undefined === v ? 'nil' : v;
            })
          );
          done();
        });
      });

      describe('that is a function', function() {
        const special = function(obj, key) {
          return obj[key];
        };

        it('works', function(done) {
          assert.equal('jiro', mpath.get('name', o, special));

          assert.deepEqual(
            { second: { third: [3, { name: 'aaron' }, 9] } }
            , mpath.get('first', o, special)
          );

          assert.deepEqual(
            { third: [3, { name: 'aaron' }, 9] }
            , mpath.get('first.second', o, special)
          );

          assert.deepEqual(
            [3, { name: 'aaron' }, 9]
            , mpath.get('first.second.third', o, special)
          );

          assert.deepEqual(
            3
            , mpath.get('first.second.third.0', o, special)
          );

          assert.deepEqual(
            4
            , mpath.get('first.second.third.0', o, special, function(v) {
              return 3 === v ? 4 : v;
            })
          );

          assert.deepEqual(
            9
            , mpath.get('first.second.third.2', o, special)
          );

          assert.deepEqual(
            { name: 'aaron' }
            , mpath.get('first.second.third.1', o, special)
          );

          assert.deepEqual(
            'aaron'
            , mpath.get('first.second.third.1.name', o, special)
          );

          assert.deepEqual([
            { name: 'one' },
            { name: 'two', _doc: { name: '2' } },
            { name: 'three',
              comments: [{}, { comments: [{ val: 'twoo' }] }],
              _doc: { name: '3', comments: [{}, { _doc: { comments: [{ val: 2 }] } }] } }],
          mpath.get('comments', o, special));

          assert.deepEqual({ name: 'one' }, mpath.get('comments.0', o, special));
          assert.deepEqual('one', mpath.get('comments.0.name', o, special));
          assert.deepEqual('two', mpath.get('comments.1.name', o, special));
          assert.deepEqual('three', mpath.get('comments.2.name', o, special));
          assert.deepEqual('nice', mpath.get('comments.2.name', o, special, function(v) {
            return 'three' === v ? 'nice' : v;
          }));

          assert.deepEqual([{}, { comments: [{ val: 'twoo' }] }]
            , mpath.get('comments.2.comments', o, special));

          assert.deepEqual({ comments: [{ val: 'twoo' }] }
            , mpath.get('comments.2.comments.1', o, special));

          assert.deepEqual('twoo', mpath.get('comments.2.comments.1.comments.0.val', o, special));

          let overide = false;
          assert.deepEqual('twoo', mpath.get('comments.8.comments.1.comments.0.val', o, function(obj, path) {
            if (Array.isArray(obj) && 8 == path) {
              overide = true;
              return obj[2];
            }
            return obj[path];
          }));
          assert.ok(overide);

          done();
        });

        it('in combination with map', function(done) {
          const special = function(obj, key) {
            if (Array.isArray(obj)) return obj[key];
            return obj.mpath;
          };
          const map = function(val) {
            return 'convert' == val
              ? 'mpath'
              : val;
          };
          const o = { mpath: [{ mpath: 'converse' }, { mpath: 'convert' }] };

          assert.equal('mpath', mpath.get('something.1.kewl', o, special, map));
          done();
        });
      });
    });
  });

  describe('set', function() {
    it('prevents writing to __proto__', function() {
      const obj = {};
      mpath.set('__proto__.x', 'foobar', obj);
      assert.ok(!({}.x));

      mpath.set('constructor.prototype.x', 'foobar', obj);
      assert.ok(!({}.x));
    });

    describe('without `special`', function() {
      const o = doc();

      it('works', function(done) {
        mpath.set('name', 'a new val', o, function(v) {
          return 'a new val' === v ? 'changed' : v;
        });
        assert.deepEqual('changed', o.name);

        mpath.set('name', 'changed', o);
        assert.deepEqual('changed', o.name);

        mpath.set('first.second.third', [1, { name: 'x' }, 9], o);
        assert.deepEqual([1, { name: 'x' }, 9], o.first.second.third);

        mpath.set('first.second.third.1.name', 'y', o);
        assert.deepEqual([1, { name: 'y' }, 9], o.first.second.third);

        mpath.set('comments.1.name', 'ttwwoo', o);
        assert.deepEqual({ name: 'ttwwoo', _doc: { name: '2' } }, o.comments[1]);

        mpath.set('comments.2.comments.1.comments.0.expand', 'added', o);
        assert.deepEqual(
          { val: 'twoo', expand: 'added' }
          , o.comments[2].comments[1].comments[0]);

        mpath.set('comments.2.comments.1.comments.2', 'added', o);
        assert.equal(3, o.comments[2].comments[1].comments.length);
        assert.deepEqual(
          { val: 'twoo', expand: 'added' }
          , o.comments[2].comments[1].comments[0]);
        assert.deepEqual(
          undefined
          , o.comments[2].comments[1].comments[1]);
        assert.deepEqual(
          'added'
          , o.comments[2].comments[1].comments[2]);

        done();
      });

      describe('array.path', function() {
        d